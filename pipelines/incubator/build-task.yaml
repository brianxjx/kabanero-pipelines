#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-build-task
spec:
  inputs:
    resources:
    - name: git-source
      type: git
    params:
    - name: stack-image-registry-url
      default: docker.io
  outputs:
    resources:
    - name: docker-image
      type: image
  steps:
  - name: imagename-lowercase
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        #logic to make docker image image_name as lowercase
        #example input docker-image-url=image-registry.openshift-image-registry.svc:5000/kabanero/appsodyMPversion:abcDEF
        # Then output should be = image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF
        
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL=\$( echo \$(outputs.resources.docker-image.url) ) " > imageurl_imagename_lowercase.sh

        # we cut the string with last occurance of '/' to get image name and tag as secondHalf of URL
        echo "firstHalfURL=\$(echo \$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f2- | rev)"  >> imageurl_imagename_lowercase.sh
        echo "secondHalfURL=\$(echo \$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f1 | rev)" >>  imageurl_imagename_lowercase.sh

        # we then cut the secondHalfURL based on delimiter ":" to get image name and tag name
        echo "imagename=\$(cut -d ':' -f 1 <<< \"\$secondHalfURL\" )" >>  imageurl_imagename_lowercase.sh
        echo "tagname=\$(cut -d ':' -f 2- <<< \"\$secondHalfURL\" )" >>  imageurl_imagename_lowercase.sh

        # we only convert imagename to lowercase, and not the tag name.
        echo "imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]' '[:lower:]')" >>  imageurl_imagename_lowercase.sh

        # finally concatinate the image url with all the pieces together with imagename as lowercase.
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase:\$tagname" >>  imageurl_imagename_lowercase.sh
        echo "echo \"\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\" " >>  imageurl_imagename_lowercase.sh
        chmod 755 imageurl_imagename_lowercase.sh
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: build
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        echo "Checking for configmap value....DEFAULT_STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL"
        STACK_IMAGE_REGISTRY_URL=$(inputs.params.stack-image-registry-url)
        if [ -z "$DEFAULT_STACK_IMAGE_REGISTRY_URL" ]
        then
            echo "DEFAULT_STACK_IMAGE_REGISTRY_URL not configured; using $STACK_IMAGE_REGISTRY_URL for stack image download"
        else
            echo "Stack image registry url setup by user is $DEFAULT_STACK_IMAGE_REGISTRY_URL"
            STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL

            #Creating a cert for authentication of buildah login of the DEFAULT_STACK_IMAGE_REGISTRY_URL registry url
            echo "HOST=$DEFAULT_STACK_IMAGE_REGISTRY_URL" > cert-creation.sh
            echo "sudo mkdir -p /etc/docker/certs.d/\${HOST}" >> cert-creation.sh
            echo "openssl s_client -connect \${HOST} -servername \${HOST} 2>/dev/null </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/docker/certs.d/\${HOST}/ca.crt" >> cert-creation.sh

            if [[ ( -z "$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME" ) || ( -z "$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD" ) ]]
            then
               echo "DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME or DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD is empty ,Assumption is $DEFAULT_STACK_IMAGE_REGISTRY_URL is internal registry, skipping the login to the registry"
            else
               echo "Both DEFAULT_STACK_IMAGE_REGISTRY_URL and Secrets are provided"
               echo "Adding buildah login command to cert-creation.sh script"
               echo "buildah login -u $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME -p $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD \${HOST}" >> cert-creation.sh
            fi
             chmod 755 cert-creation.sh
             ./cert-creation.sh
        fi
        cd /workspace/$gitsource

        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

        appsody build -t "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" --buildah --buildah-options "--format=docker" --stack-registry "$STACK_IMAGE_REGISTRY_URL"
    env:
    - name: gitsource
      value: git-source
    - name: DEFAULT_STACK_IMAGE_REGISTRY_URL
      valueFrom:
        configMapKeyRef:
         name: stack-image-registry-map
         key: default-stack-image-registry-url
         optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: username
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: password
          optional: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /etc/secret-volume
  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: config-volume
    configMap:
      name: stack-image-registry-map
      optional: true
  - name: secret-volume
    secret:
      secretName: default-stack-image-registry-secret
      optional: true
